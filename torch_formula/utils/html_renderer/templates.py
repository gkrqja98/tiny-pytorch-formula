"""
Templates for rendering HTML analysis reports.
"""
import os
import jinja2
from typing import Dict, List, Tuple, Optional, Union, Any

from .renderer import HTMLRenderer

def render_template(template_str, context):
    """Render a template with the given context"""
    env = jinja2.Environment()
    template = env.from_string(template_str)
    return template.render(**context)

def create_comprehensive_report_html(model_result, layer_results, visualizations, output_path, title="Comprehensive PyTorch Model Analysis"):
    """Create a comprehensive HTML report with all analysis results
    
    Args:
        model_result: Result of full model analysis
        layer_results: Results of layer-specific analyses
        visualizations: Paths to visualization images
        output_path: Path to save the HTML report
        title: Title of the report
    
    Returns:
        Path to the saved HTML report
    """
    # Create sections for the report
    model_overview_section = _create_model_overview_section(model_result)
    layer_analysis_section = _create_layer_analysis_section(layer_results)
    visualizations_section = _create_visualizations_section(visualizations)
    
    # Combine sections into the full report
    report_content = f"""
    <h1>{title}</h1>
    
    <p>This report provides a comprehensive analysis of the PyTorch model, including forward and backward passes, 
    mathematical formulations, and visualizations of the computation process.</p>
    
    {model_overview_section}
    
    {layer_analysis_section}
    
    {visualizations_section}
    
    <footer>
        <p><small>Generated by PyTorch Formula Analysis Tool</small></p>
    </footer>
    """
    
    # Wrap in the HTML template and save
    full_html = HTMLRenderer.wrap_in_template(report_content, title)
    HTMLRenderer.save_html(full_html, output_path)
    
    return output_path

def _create_model_overview_section(model_result):
    """Create the model overview section"""
    html = """
    <h2>Model Overview</h2>
    """
    
    # Add model result
    if model_result and 'html_path' in model_result:
        # Extract content from the HTML file
        try:
            with open(model_result['html_path'], 'r', encoding='utf-8') as f:
                content = f.read()
                # Extract just the body content (simplified approach)
                body_start = content.find('<body>')
                body_end = content.find('</body>')
                if body_start > 0 and body_end > 0:
                    body_content = content[body_start + 7:body_end].strip()
                    # Add the content to a collapsible section
                    html += HTMLRenderer.create_collapsible_section("Full Model Analysis", body_content)
                else:
                    html += f"<p>Model analysis available at: <a href='{model_result['html_path']}'>{model_result['html_path']}</a></p>"
        except Exception as e:
            html += f"<p>Error loading model analysis: {str(e)}</p>"
            html += f"<p>Analysis file: <a href='{model_result['html_path']}'>{model_result['html_path']}</a></p>"
    else:
        html += "<p>No model overview available.</p>"
    
    return html

def _create_layer_analysis_section(layer_results):
    """Create the layer analysis section"""
    html = """
    <h2>Layer-specific Analysis</h2>
    
    <p>This section contains detailed analysis of specific layers in the model, 
    showing both forward and backward computation with mathematical formulas.</p>
    """
    
    if not layer_results:
        html += "<p>No layer-specific analysis available.</p>"
        return html
    
    # Create tabs for each layer
    tabs = {}
    for layer_name, result in layer_results.items():
        if 'html_path' in result:
            try:
                with open(result['html_path'], 'r', encoding='utf-8') as f:
                    content = f.read()
                    # Extract just the body content (simplified approach)
                    body_start = content.find('<body>')
                    body_end = content.find('</body>')
                    if body_start > 0 and body_end > 0:
                        layer_content = content[body_start + 7:body_end].strip()
                        tabs[layer_name] = layer_content
                    else:
                        tabs[layer_name] = f"<p>Layer analysis available at: <a href='{result['html_path']}'>{result['html_path']}</a></p>"
            except Exception as e:
                tabs[layer_name] = f"<p>Error loading layer analysis: {str(e)}</p>"
                tabs[layer_name] += f"<p>Analysis file: <a href='{result['html_path']}'>{result['html_path']}</a></p>"
        else:
            tabs[layer_name] = "<p>Analysis information not available.</p>"
    
    html += HTMLRenderer.create_tabs(tabs)
    
    return html

def _create_visualizations_section(visualizations):
    """Create the visualizations section"""
    html = """
    <h2>Visualizations</h2>
    
    <p>This section contains visualizations of the model, including tensor data, 
    gradient flow, and computation graphs.</p>
    """
    
    if not visualizations:
        html += "<p>No visualizations available.</p>"
        return html
    
    # Create visualization grid
    viz_dict = {}
    for viz_type, viz_path in visualizations.items():
        # Convert the technical name to a more readable title
        title = viz_type.replace('_', ' ').title()
        viz_dict[title] = viz_path
    
    html += HTMLRenderer.create_visualization_grid(viz_dict)
    
    return html
